# -*- coding: utf-8 -*-
"""Fake News Prediction****

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXou4uVc51ydQGcRphxSQKFFY1MPxNgD
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

news_dataset.head()

news_dataset.isnull().sum()

news_dataset = news_dataset.fillna('')

news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

X = news_dataset.drop('label',axis=1)
Y = news_dataset['label']

print(X)
print(Y)

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

model = LogisticRegression()

model.fit(X_train,Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data:', training_data_accuracy)

X_new = X_test[56]

prediction = model.predict(X_new) 
print(prediction)

if(X_train_prediction[0]==0):
   print('the news is real')
else:
  print('the news is fake')

print(Y_test[56])

pip install gradio

import gradio as gr
 
def greet(prediction):
  if(prediction==0):
     return "This news is real"
  else:
     return "This news is fake"   

iface =gr.Interface(fn=greet, inputs="number", outputs="text")
iface.launch(share=True)